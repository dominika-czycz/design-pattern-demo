@startuml

class Client {}

interface Iterator<ELEMENT> {
  +hasNext(): boolean
  +next(): ELEMENT
}

class ConcreteIterator<ELEMENT> implements Iterator<ELEMENT> {
  -collection: Collection
  -position: int
  +hasNext(): boolean
  +next(): ELEMENT
}

interface Aggregate<ELEMENT> {
  +createIterator(): Iterator<ELEMENT>
}

class ConcreteAggregate<ELEMENT> implements Aggregate<ELEMENT> {
  -elements: ELEMENT[]
  +createIterator(): Iterator
}

Client -> Aggregate
Client -> Iterator
Aggregate .> Iterator: <<instantiate>>
ConcreteAggregate <- ConcreteIterator

note left of ConcreteAggregate::createIterator #LightBlue
return new ConcreteIterator(this);
end note

hide empty fields
hide empty methods

skinparam class {
  BackgroundColor LightYellow
  BorderColor DarkSlateGray
  ArrowColor DarkSlateGray
  FontColor DarkSlateGray
}
@enduml
